const metricsInfo = {
	java: [
		{
			metric: "LCOM5",
			title: "Lack of Cohesion in Class Methods",
			howToFix: "Try not to mix methods and attributes that serve different functionalities in the same class.",
			explanation: "It measures the cohesion of your source code. The term cohesion refers to the basic principle that one class should implement only a certain functionality.",
			reason: "exceed",
			threshold: "1",
			affects: ["Readability", "Reusability"],
			category: "cohesion",
		},
		{
			metric: "NL",
			title: "Nesting Level of Class",
			howToFix: "Consider separating nested blocks, combining logical operations and/or using early returns.",
			explanation: "This measures the depth of nested blocks. Highly nested blocks increase complexity, reduce code clarity, and make code more difficult to read.",
			reason: "exceed",
			threshold: "4",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "complexity",
		},
		{
			metric: "WMC",
			title: "Weighted Methods per Class",
			howToFix: "You can refactor the methods that contain large number of different control flow paths.",
			explanation: "It measures the complexity of the class as expressed by the the number of independent control flow paths in it.",
			reason: "exceed",
			threshold: "10",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "complexity",
		},
		{
			metric: "CBO",
			title: "Coupling Between Objects",
			howToFix: "Consider using interfaces while exposing functionality.",
			explanation: "It measures the coupling of the class as expressed by the the number of directly used other classes. Classes using many other classes are very sensitive to the changes in the system.",
			reason: "exceed",
			threshold: "6",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "coupling",
		},
		{
			metric: "NII",
			title: "Number of Incoming Invocations",
			howToFix: "Reduce the number of the times the methods of this class are called by other methods.",
			explanation: "It measures the coupling of the class as expressed by the number of other methods and attribute initializations which directly call the local methods of the class.",
			reason: "exceed",
			threshold: "3",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "coupling",
		},
		{
			metric: "NOI",
			title: "Number of Outgoing Invocations",
			howToFix: "Reduce the number of the times the methods of this class call methods of other classes.",
			explanation: "It measures the coupling of the class as expressed by the number of other methods and attribute initializations which are directly called by the local methods of the class.",
			reason: "exceed",
			threshold: "3",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "coupling",
		},
		{
			metric: "RFC",
			title: "Response Set for Class",
			howToFix: "Consider to split the class into multiple classes, each having a certain scope. In addition, you can also reduce the number of methods outside the class that are called by methods of this class.",
			explanation: "It measures the coupling of the class as expressed by the number of local methods in the class given the number of directly invoked other methods by its methods or attribute initializations.",
			reason: "exceed",
			threshold: "20",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "coupling",
		},
		{
			metric: "AD",
			title: "API Documentation",
			howToFix: "Add documentation in the public methods of the class, so as to increase their comprehensibility.",
			explanation: "It measures the level of documentation of the class as expressed by the ratio of its documented public methods.",
			reason: "fall below",
			threshold: "0.6",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "documentation",
		},
		{
			metric: "TCD",
			title: "Total Comment Density",
			howToFix: "Add a more detailed documentation.",
			explanation: "It measures the level of documentation of the class as expressed by the ratio of the total comment lines of the class to the total lines of code.",
			reason: "fall below",
			threshold: "0.2",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "documentation",
		},
		{
			metric: "LOC",
			title: "Class Size in Lines of Code",
			howToFix: "Try to reduce the size of the class.",
			explanation: "Number of code lines of the class, including empty and comment lines.",
			reason: "exceed",
			threshold: "180",
			affects: ["Readability"],
			category: "size",
		},
		{
			metric: "TNM",
			title: "Number of Methods per Class",
			howToFix: "The class contains too many methods. Consider to split the class into multiple classes.",
			explanation: "Number of methods in the class, including the inherited ones, as well as the inherited and local methods of its nested, anonymous, and local classes",
			reason: "exceed",
			threshold: "25",
			affects: ["Readability"],
			category: "size",
		},
		{
			metric: "DIT",
			title: "Depth of Class Inheritance Tree",
			howToFix: "Consider to decrease inheritance (number of ancestors) so as to increase comprehensibility.",
			explanation: "Length of the path that leads from the class to its farthest ancestor in the inheritance tree.",
			reason: "exceed",
			threshold: "4",
			affects: ["Reusability"],
			category: "inheritance",
		},
		{
			metric: "MI",
			title: "Maintainability Index",
			howToFix: "Try to reduce the complexity of the implementation along with providing better documentation. Splitting complex methods into multiple ones each serving a certain functionality and thus minimizing the length of their vocabulary leads to more maintainable code.",
			explanation: "It measures the extent to which a software component is maintainable based on its complexity, size and level of documentation.",
			reason: "fall below",
			threshold: "80",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "complexity",
		},
		{
			metric: "SECURITY_VIOL",
			title: "Security Vulnerabilities of Dependencies",
			howToFix: "Consider changing or upgrading your dependencies into later versions.",
			explanation: "It identifies the known vulnerabilities existing in the dependencies of the source code.",
			reason: "exceed",
			threshold: "10",
			affects: ["Security"],
			category: "security",
		},
	],
	javascript: [
		{
			metric: "ESCOMP_CC",
			title: "McCabe Cyclomatic Complexity",
			howToFix: "Try to reduce the complexity of your methods. Maybe consider splitting complex methods into multiple simpler ones.",
			explanation: "It measures the number of different execution paths that exist in the source code.",
			reason: "exceed",
			threshold: "4",
			affects: ["Readability", "Reusability", "Maintainability"],
			category: "complexity",
		},
		{
			metric: "ESCOMP_MI",
			title: "Maintainability Index",
			howToFix: "Try to reduce the complexity of the implementation along with providing better documentation. Splitting complex methods into multiple ones each serving a certain functionality and thus minimizing the length of their vocabulary leads to more maintainable code.",
			explanation: "It measures the extent to which a software component is maintainable based on its complexity, size and level of documentation.",
			reason: "fall below",
			threshold: "100",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "complexity",
		},
		{
			metric: "ESCOMP_IMPORTS",
			title: "Number of Imports",
			howToFix: "Try to decrease the number of imports in order to increase comprehensibility.",
			explanation: "It measures the number of imports.",
			reason: "exceed",
			threshold: "7",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "complexity",
		},
		{
			metric: "NSP_VIOL",
			title: "Security Vulnerabilities of Dependencies",
			howToFix: "Consider changing or upgrading your dependencies into later versions.",
			explanation: "It identifies the known vulnerabilities existing in the dependencies of the source code.",
			reason: "exceed",
			threshold: "10",
			affects: ["Security"],
			category: "security",
		},
		{
			metric: "ESCOMP_CD",
			title: "Comment Density",
			howToFix: "Add a more detailed documentation.",
			explanation: "It measures the level of documentation of the file as expressed by the ratio of the total comment lines of the class to the total lines of code.",
			reason: "fall below",
			threshold: "10",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "documentation",
		},
		{
			metric: "ESCOMP_LOC",
			title: "Size in Lines of Code",
			howToFix: "Try to reduce the size of the file.",
			explanation: "Number of code lines of the file, including empty and comment lines.",
			reason: "exceed",
			threshold: "180",
			affects: ["Readability", "Maintainability"],
			category: "size",
		},
		{
			metric: "ESCOMP_PAR",
			title: "Number of Parameters",
			howToFix: "Try to reduce the number of parameters of the method.",
			explanation: "Number of parameters given as input in the method.",
			reason: "exceed",
			threshold: "4",
			affects: ["Readability", "Maintainability"],
			category: "size",
		},
	],
	python: [
		{
			metric: "LCOM5",
			title: "Lack of Cohesion in Class Methods",
			howToFix: "Try not to mix methods and attributes that serve different functionalities in the same class.",
			explanation: "It measures the cohesion of your source code. The term cohesion refers to the basic principle that one class should implement only a certain functionality.",
			reason: "exceed",
			threshold: "1",
			affects: ["Readability", "Reusability"],
			category: "cohesion",
		},
		{
			metric: "NL",
			title: "Nesting Level of Class",
			howToFix: "Consider separating nested blocks, combining logical operations and/or using early returns.",
			explanation: "This measures the depth of nested blocks. Highly nested blocks increase complexity, reduce code clarity, and make code more difficult to read.",
			reason: "exceed",
			threshold: "4",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "complexity",
		},
		{
			metric: "WMC",
			title: "Weighted Methods per Class",
			howToFix: "You can refactor the methods that contain large number of different control flow paths.",
			explanation: "It measures the complexity of the class as expressed by the the number of independent control flow paths in it.",
			reason: "exceed",
			threshold: "10",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "complexity",
		},
		{
			metric: "CBO",
			title: "Coupling Between Objects",
			howToFix: "Consider using interfaces while exposing functionality.",
			explanation: "It measures the coupling of the class as expressed by the the number of directly used other classes. Classes using many other classes are very sensitive to the changes in the system.",
			reason: "exceed",
			threshold: "6",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "coupling",
		},
		{
			metric: "NII",
			title: "Number of Incoming Invocations",
			howToFix: "Reduce the number of the times the methods of this class are called by other methods.",
			explanation: "It measures the coupling of the class as expressed by the number of other methods and attribute initializations which directly call the local methods of the class.",
			reason: "exceed",
			threshold: "3",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "coupling",
		},
		{
			metric: "NOI",
			title: "Number of Outgoing Invocations",
			howToFix: "Reduce the number of the times the methods of this class call methods of other methods.",
			explanation: "It measures the coupling of the class as expressed by the number of other methods and attribute initializations which are directly called by the local methods of the class.",
			reason: "exceed",
			threshold: "3",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "coupling",
		},
		{
			metric: "RFC",
			title: "Response Set for Class",
			howToFix: "Consider to split the class into multiple classes, each having a certain scope. In addition, you can also reduce the number of methods outside the class that are called by methods of this class.",
			explanation: "It measures the coupling of the class as expressed by the number of local methods in the class given the number of directly invoked other methods by its methods or attribute initializations.",
			reason: "exceed",
			threshold: "20",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "coupling",
		},
		{
			metric: "TCD",
			title: "Total Comment Density",
			howToFix: "Add a more detailed documentation.",
			explanation: "It measures the level of documentation of the class as expressed by the ratio of the total comment lines of the class to the total lines of code.",
			reason: "fall below",
			threshold: "0.2",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "documentation",
		},
		{
			metric: "LOC",
			title: "Class Size in Lines of Code",
			howToFix: "Try to reduce the size of the class.",
			explanation: "Number of code lines of the class, including empty and comment lines.",
			reason: "exceed",
			threshold: "180",
			affects: ["Readability", "Reusability"],
			category: "size",
		},
		{
			metric: "TNM",
			title: "Number of Methods per Class",
			howToFix: "The class contains too many methods. Consider to split the class into multiple classes.",
			explanation: "Number of methods in the class, including the inherited ones, as well as the inherited and local methods of its nested, anonymous, and local classes",
			reason: "exceed",
			threshold: "25",
			affects: ["Readability", "Reusability"],
			category: "size",
		},
		{
			metric: "DIT",
			title: "Depth of Class Inheritance Tree",
			howToFix: "Consider to decrease inheritance (number of ancestors) so as to increase comprehensibility.",
			explanation: "Length of the path that leads from the class to its farthest ancestor in the inheritance tree.",
			reason: "exceed",
			threshold: "4",
			affects: ["Reusability"],
			category: "inheritance",
		},
		{
			metric: "MI",
			title: "Maintainability Index",
			howToFix: "Try to reduce the complexity of the implementation along with providing better documentation. Splitting complex methods into multiple ones each serving a certain functionality and thus minimizing the length of their vocabulary leads to more maintainable code.",
			explanation: "It measures the extent to which a software component is maintainable based on its complexity, size and level of documentation.",
			reason: "fall below",
			threshold: "80",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "complexity",
		},
		{
			metric: "SECURITY_VIOL",
			title: "Security Vulnerabilities of Dependencies",
			howToFix: "Consider changing or upgrading your dependencies into later versions.",
			explanation: "It identifies the known vulnerabilities existing in the dependencies of the source code.",
			reason: "exceed",
			threshold: "10",
			affects: ["Security"],
			category: "security",
		},
	],
	typescript: [
		{
			metric: "ESCOMP_CC",
			title: "McCabe Cyclomatic Complexity",
			howToFix: "Try to reduce the complexity of your methods. Maybe consider splitting complex methods into multiple simpler ones.",
			explanation: "It measures the number of different execution paths that exist in the source code.",
			reason: "exceed",
			threshold: "6",
			affects: ["Readability", "Reusability", "Maintainability"],
			category: "complexity",
		},
		{
			metric: "ESCOMP_MI",
			title: "Maintainability Index",
			howToFix: "Try to reduce the complexity of the implementation along with providing better documentation. Splitting complex methods into multiple ones each serving a certain functionality and thus minimizing the length of their vocabulary leads to more maintainable code.",
			explanation: "It measures the extent to which a software component is maintainable based on its complexity, size and level of documentation.",
			reason: "fall below",
			threshold: "90",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "complexity",
		},
		{
			metric: "NSP_VIOL",
			title: "Security Vulnerabilities of Dependencies",
			howToFix: "Consider changing or upgrading your dependencies into later versions.",
			explanation: "It identifies the known vulnerabilities existing in the dependencies of the source code.",
			reason: "exceed",
			threshold: "10",
			affects: ["Security"],
			category: "security",
		},
		{
			metric: "ESCOMP_CD",
			title: "Comment Density",
			howToFix: "Add a more detailed documentation.",
			explanation: "It measures the level of documentation of the file as expressed by the ratio of the total comment lines of the class to the total lines of code.",
			reason: "fall below",
			threshold: "10",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "documentation",
		},
		{
			metric: "ESCOMP_LOC",
			title: "Size in Lines of Code",
			howToFix: "Try to reduce the size of the file.",
			explanation: "Number of code lines of the file, including empty and comment lines.",
			reason: "exceed",
			threshold: "180",
			affects: ["Readability", "Maintainability"],
			category: "size",
		},
		{
			metric: "ESCOMP_DIFF",
			title: "Halstead Difficulty",
			howToFix: "Try to simplify the implementation by reducing the number of used operators and operands.",
			explanation: "It measures the complexity of the implementation by using the number of unique operators and operands versus the total ones. Using more operators and operands increases error proneness and reduces understandability.",
			reason: "exceed",
			threshold: "10",
			affects: ["Readability", "Maintainability", "Reusability"],
			category: "size",
		},
	],
	php: [
		{
			metric: "PHPMETRICS_CC",
			title: "Cyclomatic Complexity",
			howToFix: "Try to reduce the complexity of your classes. Maybe consider splitting complex classes into multiple simpler ones.",
			explanation: "It measures the number of different execution paths that exist in the source code.",
			reason: "exceed",
			threshold: "4",
			affects: ["Readability", "Reusability", "Maintainability"],
			category: "complexity",
		},
		{
			metric: "PHPMETRICS_MI",
			title: "Maintainability Index",
			howToFix: "Try to reduce the complexity of the implementation along with providing better documentation. Splitting complex classes into multiple ones each serving a certain functionality and thus minimizing the length of their vocabulary leads to more maintainable code.",
			explanation: "It measures the extent to which a software component is maintainable based on its complexity, size and level of documentation.",
			reason: "fall below",
			threshold: "95",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "complexity",
		},
		{
			metric: "NSP_VIOL",
			title: "Security Vulnerabilities of Dependencies",
			howToFix: "Consider changing or upgrading your dependencies into later versions.",
			explanation: "It identifies the known vulnerabilities existing in the dependencies of the source code.",
			reason: "exceed",
			threshold: "10",
			affects: ["Security"],
			category: "security",
		},
		{
			metric: "PHPMETRICS_CD",
			title: "Comments Density",
			howToFix: "Add a more detailed documentation.",
			explanation: "It measures the level of documentation of the class as expressed by the ratio of the total comment lines of the class to the total lines of code.",
			reason: "fall below",
			threshold: "15",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "documentation",
		},
		{
			metric: "PHPMETRICS_LOC",
			title: "Size in Lines of Code",
			howToFix: "Try to reduce the size of the class.",
			explanation: "Number of code lines of the class, including empty and comment lines.",
			reason: "exceed",
			threshold: "180",
			affects: ["Readability", "Maintainability"],
			category: "size",
		},
		{
			metric: "PHPMETRICS_DIFF",
			title: "Halstead Difficulty",
			howToFix: "Try to simplify the implementation by reducing the number of used operators and operands.",
			explanation: "It measures the complexity of the implementation by using the number of unique operators and operands versus the total ones. Using more operators and operands increases error proneness and reduces understandability.",
			reason: "exceed",
			threshold: "10",
			affects: ["Readability", "Maintainability"],
			category: "size",
		},
	],
	"c#": [
		{
			metric: "LCOM5",
			title: "Lack of Cohesion in Class Methods",
			howToFix: "Try not to mix methods and properties that serve different functionalities in the same class.",
			explanation: "It measures the cohesion of your source code. The term cohesion refers to the basic principle that one class should implement only a certain functionality.",
			reason: "exceed",
			threshold: "1",
			affects: ["Readability", "Reusability"],
			category: "cohesion",
		},
		{
			metric: "NL",
			title: "Nesting Level of Class",
			howToFix: "Consider separating nested blocks, combining logical operations and/or using early returns.",
			explanation: "This measures the depth of nested blocks. Highly nested blocks increase complexity, reduce code clarity, and make code more difficult to read.",
			reason: "exceed",
			threshold: "4",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "complexity",
		},
		{
			metric: "WMC",
			title: "Weighted Methods per Class",
			howToFix: "You can refactor the methods that contain large number of different control flow paths.",
			explanation: "It measures the complexity of the class as expressed by the the number of independent control flow paths in it.",
			reason: "exceed",
			threshold: "10",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "complexity",
		},
		{
			metric: "AD",
			title: "API Documentation",
			howToFix: "Add documentation in the public methods of the class, so as to increase their comprehensibility.",
			explanation: "It measures the level of documentation of the class as expressed by the ratio of its documented public methods.",
			reason: "fall below",
			threshold: "0.6",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "documentation",
		},
		{
			metric: "TCD",
			title: "Total Comment Density",
			howToFix: "Add a more detailed documentation.",
			explanation: "It measures the level of documentation of the class as expressed by the ratio of the total comment lines of the class to the total lines of code.",
			reason: "fall below",
			threshold: "0.2",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "documentation",
		},
		{
			metric: "LOC",
			title: "Class Size in Lines of Code",
			howToFix: "Try to reduce the size of the class.",
			explanation: "Number of code lines of the class, including empty and comment lines.",
			reason: "exceed",
			threshold: "180",
			affects: ["Readability"],
			category: "size",
		},
		{
			metric: "TNM",
			title: "Number of Methods per Class",
			howToFix: "The class contains too many methods. Consider to split the class into multiple classes.",
			explanation: "Number of methods in the class, including the inherited ones, as well as the inherited and local methods of its nested, anonymous, and local classes",
			reason: "exceed",
			threshold: "25",
			affects: ["Readability"],
			category: "size",
		},
		{
			metric: "DIT",
			title: "Depth of Class Inheritance Tree",
			howToFix: "Consider to decrease inheritance (number of ancestors) so as to increase comprehensibility.",
			explanation: "Length of the path that leads from the class to its farthest ancestor in the inheritance tree.",
			reason: "exceed",
			threshold: "4",
			affects: ["Reusability"],
			category: "inheritance",
		},
		{
			metric: "MI",
			title: "Maintainability Index",
			howToFix: "Try to reduce the complexity of the implementation along with providing better documentation. Splitting complex methods into multiple ones each serving a certain functionality and thus minimizing the length of their vocabulary leads to more maintainable code.",
			explanation: "It measures the extent to which a software component is maintainable based on its complexity, size and level of documentation.",
			reason: "fall below",
			threshold: "80",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "complexity",
		},
		{
			metric: "SECURITY_VIOL",
			title: "Security Vulnerabilities of Dependencies",
			howToFix: "Consider changing or upgrading your dependencies into later versions.",
			explanation: "It identifies the known vulnerabilities existing in the dependencies of the source code.",
			reason: "exceed",
			threshold: "10",
			affects: ["Security"],
			category: "security",
		},
	],
	kotlin: [
		{
			metric: "LOC",
			title: "Size in Lines of Code",
			howToFix: "Try to reduce the size of the file.",
			explanation: "Number of code lines of the file, including empty and comment lines.",
			reason: "exceed",
			threshold: "180",
			affects: ["Readability", "Maintainability"],
			category: "size",
		},
		{
			metric: "CC",
			title: "McCabe Cyclomatic Complexity",
			howToFix: "Try to reduce the complexity of your methods. Maybe consider splitting complex methods into multiple simpler ones.",
			explanation: "It measures the number of different execution paths that exist in the source code.",
			reason: "exceed",
			threshold: "4",
			affects: ["Readability", "Reusability", "Maintainability"],
			category: "complexity",
		},
		{
			metric: "CD",
			title: "Total Comment Density",
			howToFix: "Add a more detailed documentation.",
			explanation: "It measures the level of documentation of the class as expressed by the ratio of the total comment lines of the class to the total lines of code.",
			reason: "fall below",
			threshold: "15",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "documentation",
		},
		{
			metric: "LLOC",
			title: "Logical Lines of Code",
			howToFix: "Try to reduce the size of the class.",
			explanation: "Number of code lines of the class, including empty and comment lines.",
			reason: "exceed",
			threshold: "180",
			affects: ["Readability", "Maintainability"],
			category: "size",
		},
		{
			metric: "MI",
			title: "Maintainability Index",
			howToFix: "Try to reduce the complexity of the implementation along with providing better documentation. Splitting complex methods into multiple ones each serving a certain functionality and thus minimizing the length of their vocabulary leads to more maintainable code.",
			explanation: "It measures the extent to which a software component is maintainable based on its complexity, size and level of documentation.",
			reason: "fall below",
			threshold: "95",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "complexity",
		},
		{
			metric: "NSP_VIOL",
			title: "Security Vulnerabilities of Dependencies",
			howToFix: "Consider changing or upgrading your dependencies into later versions.",
			explanation: "It measures the number the security vulnerabilities found in the dependencies.",
			reason: "exceed",
			threshold: "10",
			affects: ["Security"],
			category: "security",
		},
	],
	dart: [
		{
			metric: "PAR",
			title: "Number of Parameters",
			howToFix: "Try to reduce the number of parameters of the method.",
			explanation: "Number of parameters given as input in the method.",
			reason: "exceed",
			threshold: "4",
			affects: ["Readability", "Maintainability"],
			category: "size",
		},
		{
			metric: "LOC",
			title: "Size in Lines of Code",
			howToFix: "Try to reduce the size of the file.",
			explanation: "Number of code lines of the file, including empty and comment lines.",
			reason: "exceed",
			threshold: "180",
			affects: ["Readability", "Maintainability"],
			category: "size",
		},
		{
			metric: "CC",
			title: "McCabe Cyclomatic Complexity",
			howToFix: "Try to reduce the complexity of your methods. Maybe consider splitting complex methods into multiple simpler ones.",
			explanation: "It measures the number of different execution paths that exist in the source code.",
			reason: "exceed",
			threshold: "4",
			affects: ["Readability", "Reusability", "Maintainability"],
			category: "complexity",
		},
		{
			metric: "CD",
			title: "Total Comment Density",
			howToFix: "Add a more detailed documentation.",
			explanation: "It measures the level of documentation of the class as expressed by the ratio of the total comment lines of the class to the total lines of code.",
			reason: "fall below",
			threshold: "15",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "documentation",
		},
		{
			metric: "LLOC",
			title: "Logical Lines of Code",
			howToFix: "Try to reduce the size of the class.",
			explanation: "Number of code lines of the class, including empty and comment lines.",
			reason: "exceed",
			threshold: "180",
			affects: ["Readability", "Maintainability"],
			category: "size",
		},
		{
			metric: "MI",
			title: "Maintainability Index",
			howToFix: "Try to reduce the complexity of the implementation along with providing better documentation. Splitting complex methods into multiple ones each serving a certain functionality and thus minimizing the length of their vocabulary leads to more maintainable code.",
			explanation: "It measures the extent to which a software component is maintainable based on its complexity, size and level of documentation.",
			reason: "fall below",
			threshold: "95",
			affects: ["Maintainability", "Readability", "Reusability"],
			category: "complexity",
		},
		{
			metric: "NSP_VIOL",
			title: "Security Vulnerabilities of Dependencies",
			howToFix: "Consider changing or upgrading your dependencies into later versions.",
			explanation: "It measures the number the security vulnerabilities found in the dependencies.",
			reason: "exceed",
			threshold: "10",
			affects: ["Security"],
			category: "security",
		},
	],
	get default() { return this.java; },
};

export default metricsInfo;
